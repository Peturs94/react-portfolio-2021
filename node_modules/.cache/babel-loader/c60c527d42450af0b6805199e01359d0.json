{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/thorpetursson/Downloads/react-website-v1-master-2/src/components/Slider.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Flickity from 'flickity';\nimport 'flickity/dist/flickity.min.css';\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      flickityReady: false\n    };\n    this.refreshFlickity = this.refreshFlickity.bind(this);\n  }\n\n  componentDidMount() {\n    this.flickity = new Flickity(this.flickityNode, this.props.options || {});\n    this.setState({\n      flickityReady: true\n    });\n  }\n\n  refreshFlickity() {\n    this.flickity.reloadCells();\n    this.flickity.resize();\n    this.flickity.updateDraggable();\n  }\n\n  componentWillUnmount() {\n    this.flickity.destroy();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const flickityDidBecomeActive = !prevState.flickityReady && this.state.flickityReady;\n    const childrenDidChange = prevProps.children.length !== this.props.children.length;\n\n    if (flickityDidBecomeActive || childrenDidChange) {\n      this.refreshFlickity();\n    }\n  }\n\n  renderPortal() {\n    if (!this.flickityNode) {\n      return null;\n    }\n\n    const mountNode = this.flickityNode.querySelector('.flickity-slider');\n\n    if (mountNode) {\n      return /*#__PURE__*/ReactDOM.createPortal(this.props.children, mountNode);\n    }\n  }\n\n  render() {\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'test',\n      ref: node => this.flickityNode = node\n    }, \"flickityBase\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), this.renderPortal()].filter(Boolean);\n  }\n\n}","map":{"version":3,"sources":["/Users/thorpetursson/Downloads/react-website-v1-master-2/src/components/Slider.js"],"names":["React","ReactDOM","Flickity","Slider","Component","constructor","props","state","flickityReady","refreshFlickity","bind","componentDidMount","flickity","flickityNode","options","setState","reloadCells","resize","updateDraggable","componentWillUnmount","destroy","componentDidUpdate","prevProps","prevState","flickityDidBecomeActive","childrenDidChange","children","length","renderPortal","mountNode","querySelector","createPortal","render","node","filter","Boolean"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,gCAAP;AAEA,eAAe,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAIA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,GAAgB,IAAIV,QAAJ,CAAa,KAAKW,YAAlB,EAAgC,KAAKP,KAAL,CAAWQ,OAAX,IAAsB,EAAtD,CAAhB;AAEA,SAAKC,QAAL,CAAc;AACZP,MAAAA,aAAa,EAAE;AADH,KAAd;AAGD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,SAAKG,QAAL,CAAcI,WAAd;AACA,SAAKJ,QAAL,CAAcK,MAAd;AACA,SAAKL,QAAL,CAAcM,eAAd;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKP,QAAL,CAAcQ,OAAd;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvC,UAAMC,uBAAuB,GAAG,CAACD,SAAS,CAACf,aAAX,IAA4B,KAAKD,KAAL,CAAWC,aAAvE;AACA,UAAMiB,iBAAiB,GAAGH,SAAS,CAACI,QAAV,CAAmBC,MAAnB,KAA8B,KAAKrB,KAAL,CAAWoB,QAAX,CAAoBC,MAA5E;;AAEA,QAAIH,uBAAuB,IAAIC,iBAA/B,EAAkD;AAChD,WAAKhB,eAAL;AACD;AACF;;AAEDmB,EAAAA,YAAY,GAAG;AACb,QAAI,CAAC,KAAKf,YAAV,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,UAAMgB,SAAS,GAAG,KAAKhB,YAAL,CAAkBiB,aAAlB,CAAgC,kBAAhC,CAAlB;;AAEA,QAAID,SAAJ,EAAe;AACb,0BAAO5B,QAAQ,CAAC8B,YAAT,CAAsB,KAAKzB,KAAL,CAAWoB,QAAjC,EAA2CG,SAA3C,CAAP;AACD;AACF;;AAEDG,EAAAA,MAAM,GAAG;AACP,WAAO,cACL;AAAK,MAAA,SAAS,EAAE,MAAhB;AAA2C,MAAA,GAAG,EAAEC,IAAI,IAAK,KAAKpB,YAAL,GAAoBoB;AAA7E,OAA4B,cAA5B;AAAA;AAAA;AAAA;AAAA,YADK,EAEL,KAAKL,YAAL,EAFK,EAGLM,MAHK,CAGEC,OAHF,CAAP;AAID;;AAvDiD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Flickity from 'flickity';\nimport 'flickity/dist/flickity.min.css';\n\nexport default class Slider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      flickityReady: false,\n    };\n\n    this.refreshFlickity = this.refreshFlickity.bind(this);\n  }\n\n  componentDidMount() {\n    this.flickity = new Flickity(this.flickityNode, this.props.options || {});\n\n    this.setState({\n      flickityReady: true,\n    });\n  }\n\n  refreshFlickity() {\n    this.flickity.reloadCells();\n    this.flickity.resize();\n    this.flickity.updateDraggable();\n  }\n\n  componentWillUnmount() {\n    this.flickity.destroy();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const flickityDidBecomeActive = !prevState.flickityReady && this.state.flickityReady;\n    const childrenDidChange = prevProps.children.length !== this.props.children.length;\n\n    if (flickityDidBecomeActive || childrenDidChange) {\n      this.refreshFlickity();\n    }\n  }\n\n  renderPortal() {\n    if (!this.flickityNode) {\n      return null;\n    }\n\n    const mountNode = this.flickityNode.querySelector('.flickity-slider');\n\n    if (mountNode) {\n      return ReactDOM.createPortal(this.props.children, mountNode);\n    }\n  }\n\n  render() {\n    return [\n      <div className={'test'} key=\"flickityBase\" ref={node => (this.flickityNode = node)} />,\n      this.renderPortal(),\n    ].filter(Boolean);\n  }\n}"]},"metadata":{},"sourceType":"module"}